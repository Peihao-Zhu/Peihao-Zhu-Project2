{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport './grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([]);\n  function handleGridChange(newWord) {\n    setGridData(newWord);\n  }\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData];\n\n    // console.log(\n    //   e +\n    //     ' ' +\n    //     gridData +\n    //     ' ' +\n    //     curWord +\n    //     ' ' +\n    //     props.rows +\n    //     ' ' +\n    //     props.cols +\n    //     ' ' +\n    //     props.row +\n    //     ' ' +\n    //     props.col,\n    // )\n\n    switch (e) {\n      case 'Enter':\n        // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, props.cols, 'abbotw')) {\n            // congraduate users and exit the program\n            const tryAgain = window.confirm('Congratulations!  Would you like to try again?');\n            if (tryAgain) {\n              // reset the program\n            } else {\n              // exit the program\n              window.stop();\n            }\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (props.attempt !== 0) {\n              props.setRow(row => row + 1);\n              props.setCol(col => 0);\n            } else {\n              // exit the program or reset the program\n              window.stop();\n            }\n          }\n          return;\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n        return;\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[props.row][props.col - 1] = '';\n          props.setCol(props.col - 1);\n        }\n        break;\n      default:\n        if (props.col === props.cols) {\n          return;\n        }\n        curWord[props.row][props.col] += e;\n        props.setCol(col => col + 1);\n        break;\n    }\n    handleGridChange(curWord);\n  }\n  function checkLetters(curWord, row, cols, answer) {\n    let flag = true;\n    const map = new Map();\n    //items in the set have been compared\n    const set = new Set();\n    addItemInMap(map, answer);\n    for (let i = 0; i < curWord.length; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          setBoxStatus([...boxStatus, {\n            id: row * cols + i,\n            value: '2'\n          }]);\n          console.log(boxStatus.length);\n          map.set(answer[i], map.get(answer[i]) - 1);\n          set.add(i);\n          boxStatus.map(item => {\n            if (item.id === row * cols + i) {\n              console.log(item.value);\n            }\n          });\n        }\n      } else {\n        flag = false;\n      }\n    }\n    for (let j = 0; j < curWord.length; j++) {\n      if (set.has(j)) continue;\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (curWord[j] === answer[k] && map.get(answer[k]) > 0) {\n          setBoxStatus([...boxStatus, {\n            id: row * cols + j,\n            value: '1'\n          }]);\n          map.set(answer[k], map.get(answer[k]) - 1);\n          set.add(j);\n        }\n      }\n    }\n    return flag;\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowItem\",\n        \"data-state\": boxStatus.map(item => {\n          // console.log(boxStatus[item.id].value)\n          if (item.value === undefined) return 'none';\n          if (item.id === rowIndex * props.cols + colIndex) {\n            return item.value === '1' ? 'yellow' : 'green';\n          }\n        })\n        //   id = {rowIndex*props.cols+colIndex}\n        //   onChange={(e) => handleGridChange(e)}\n        ,\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n        //   onKeyDown={(event) => {\n        //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n        //       inputRefs.current[rowIndex][colIndex - 1].focus()\n        //     } else if (\n        //       event.key === 'ArrowRight' &&\n        //       colIndex < props.cols - 1\n        //     ) {\n        //       inputRefs.current[rowIndex][colIndex + 1].focus()\n        //     } else if (event.key === 'Enter') {\n        //       handleEnterKeyPress(event, rowIndex, colIndex)\n        //     }\n        //   }}\n        //   ref={(input) => {\n        //     inputRefs.current[rowIndex][colIndex] = input\n        //   }}\n        ,\n        children: gridData[rowIndex][colIndex]\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n      lines: gridData[props.row][props.col],\n      answer: 'abbotw',\n      onClick: e => handleButton(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"9vdnZsrFd4Fv6CXXD4oXT4AonvE=\");\n_c = Grid;\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i];\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  }\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","Gamekeyboard","jsxDEV","_jsxDEV","Grid","props","_s","gridData","setGridData","createGridData","rows","cols","boxStatus","setBoxStatus","handleGridChange","newWord","handleButton","e","curWord","col","checkLetters","row","tryAgain","window","confirm","stop","attempt","setRow","setCol","warning","position","POSITION","TOP_RIGHT","length","answer","flag","map","Map","set","Set","addItemInMap","i","get","id","value","console","log","add","item","j","has","k","className","children","rowIndex","cell","colIndex","undefined","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","lines","onClick","_c","data","Array","fill","key","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\nimport './grid.css'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([])\n\n  function handleGridChange(newWord) {\n    setGridData(newWord)\n  }\n\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData]\n\n    // console.log(\n    //   e +\n    //     ' ' +\n    //     gridData +\n    //     ' ' +\n    //     curWord +\n    //     ' ' +\n    //     props.rows +\n    //     ' ' +\n    //     props.cols +\n    //     ' ' +\n    //     props.row +\n    //     ' ' +\n    //     props.col,\n    // )\n\n    switch (e) {\n      case 'Enter': // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, props.cols, 'abbotw')) {\n            // congraduate users and exit the program\n            const tryAgain = window.confirm(\n              'Congratulations!  Would you like to try again?',\n            )\n            if (tryAgain) {\n              // reset the program\n            } else {\n              // exit the program\n              window.stop()\n            }\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (props.attempt !== 0) {\n              props.setRow((row) => row + 1)\n              props.setCol((col) => 0)\n            } else {\n              // exit the program or reset the program\n              window.stop()\n            }\n          }\n\n          return\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT,\n          })\n        }\n        return\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[props.row][props.col - 1] = ''\n          props.setCol(props.col - 1)\n        }\n        break\n      default:\n        if (props.col === props.cols) {\n          return\n        }\n        curWord[props.row][props.col] += e\n        props.setCol((col) => col + 1)\n        break\n    }\n    handleGridChange(curWord)\n  }\n\n  function checkLetters(curWord, row, cols, answer) {\n    let flag = true\n    const map = new Map()\n    //items in the set have been compared\n    const set = new Set()\n    addItemInMap(map, answer)\n\n    for (let i = 0; i < curWord.length; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          setBoxStatus([...boxStatus, { id: row * cols + i, value: '2' }])\n          console.log(boxStatus.length)\n          map.set(answer[i], map.get(answer[i]) - 1)\n          set.add(i)\n          boxStatus.map((item) => {\n            if (item.id === row * cols + i) {\n              console.log(item.value)\n            }\n          })\n        }\n      } else {\n        flag = false\n      }\n    }\n    for (let j = 0; j < curWord.length; j++) {\n      if (set.has(j)) continue\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (curWord[j] === answer[k] && map.get(answer[k]) > 0) {\n          setBoxStatus([...boxStatus, { id: row * cols + j, value: '1' }])\n          map.set(answer[k], map.get(answer[k]) - 1)\n          set.add(j)\n        }\n      }\n    }\n\n    return flag\n  }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              className=\"rowItem\"\n              key={colIndex}\n              data-state={boxStatus.map((item) => {\n                // console.log(boxStatus[item.id].value)\n                if (item.value === undefined) return 'none'\n                if (item.id === rowIndex * props.cols + colIndex) {\n                  return item.value === '1' ? 'yellow' : 'green'\n                }\n              })}\n              //   id = {rowIndex*props.cols+colIndex}\n              //   onChange={(e) => handleGridChange(e)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n              //   onKeyDown={(event) => {\n              //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n              //       inputRefs.current[rowIndex][colIndex - 1].focus()\n              //     } else if (\n              //       event.key === 'ArrowRight' &&\n              //       colIndex < props.cols - 1\n              //     ) {\n              //       inputRefs.current[rowIndex][colIndex + 1].focus()\n              //     } else if (event.key === 'Enter') {\n              //       handleEnterKeyPress(event, rowIndex, colIndex)\n              //     }\n              //   }}\n              //   ref={(input) => {\n              //     inputRefs.current[rowIndex][colIndex] = input\n              //   }}\n            >\n              {gridData[rowIndex][colIndex]}\n            </div>\n          ))}\n        </div>\n      ))}\n      <br />\n      <Gamekeyboard\n        lines={gridData[props.row][props.col]}\n        answer={'abbotw'}\n        onClick={(e) => handleButton(e)}\n      />\n      <ToastContainer />\n    </div>\n  )\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i]\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1)\n    } else {\n      map.set(key, 1)\n    }\n  }\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}