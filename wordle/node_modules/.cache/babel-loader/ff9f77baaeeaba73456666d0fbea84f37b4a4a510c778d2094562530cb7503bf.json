{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n  function handleGridChange(newWord) {\n    setGridData(newWord);\n  }\n  function handlePosition() {\n    props.setIdx(props.idx + 1);\n  }\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData];\n    console.log(e + ' ' + gridData + ' ' + curWord + ' ' + props.rows + ' ' + props.cols + ' ' + props.idx);\n    switch (e) {\n      case 'Enter':\n        // CR\n        if (curWord.length === props.cols) {\n          // this.CheckLetters()\n          return;\n        }\n        return;\n      case 'Backspace':\n        //bS\n        if (curWord.length > 0) {\n          curWord = curWord.substr(0, curWord.length - 1);\n        }\n        break;\n      default:\n        console.log('letter ' + e);\n        if (curWord.length === props.cols) {\n          return;\n        }\n        const idx = props.idx;\n        curWord[idx / props.col][idx % props.col] += e;\n        props.setIdx(idx + 1);\n        break;\n    }\n    handleGridChange(curWord);\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        //   onChange={(e) => handleGridChange(e)}\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n        //   onKeyDown={(event) => {\n        //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n        //       inputRefs.current[rowIndex][colIndex - 1].focus()\n        //     } else if (\n        //       event.key === 'ArrowRight' &&\n        //       colIndex < props.cols - 1\n        //     ) {\n        //       inputRefs.current[rowIndex][colIndex + 1].focus()\n        //     } else if (event.key === 'Enter') {\n        //       handleEnterKeyPress(event, rowIndex, colIndex)\n        //     }\n        //   }}\n        //   ref={(input) => {\n        //     inputRefs.current[rowIndex][colIndex] = input\n        //   }}\n        ,\n        children: gridData[rowIndex][colIndex]\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n      lines: gridData,\n      answer: 'abbotw',\n      onClick: e => handleButton(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"c3kg1SKvsCmvVh8Y5E8uQFsjYmA=\");\n_c = Grid;\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","Gamekeyboard","jsxDEV","_jsxDEV","Grid","props","_s","gridData","setGridData","createGridData","rows","cols","handleGridChange","newWord","handlePosition","setIdx","idx","handleButton","e","curWord","console","log","length","substr","col","className","children","map","row","rowIndex","cell","colIndex","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","lines","answer","onClick","_c","data","Array","fill","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n\n  function handleGridChange(newWord) {\n    setGridData(newWord)\n  }\n  function handlePosition() {\n    props.setIdx(props.idx + 1)\n  }\n\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData]\n    console.log(\n      e +\n        ' ' +\n        gridData +\n        ' ' +\n        curWord +\n        ' ' +\n        props.rows +\n        ' ' +\n        props.cols +\n        ' ' +\n        props.idx,\n    )\n    switch (e) {\n      case 'Enter': // CR\n        if (curWord.length === props.cols) {\n          // this.CheckLetters()\n          return\n        }\n        return\n      case 'Backspace': //bS\n        if (curWord.length > 0) {\n          curWord = curWord.substr(0, curWord.length - 1)\n        }\n        break\n      default:\n        console.log('letter ' + e)\n        if (curWord.length === props.cols) {\n          return\n        }\n        const idx = props.idx\n        curWord[idx / props.col][idx % props.col] += e\n        props.setIdx(idx + 1)\n        break\n    }\n    handleGridChange(curWord)\n  }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              key={colIndex}\n              //   onChange={(e) => handleGridChange(e)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n              //   onKeyDown={(event) => {\n              //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n              //       inputRefs.current[rowIndex][colIndex - 1].focus()\n              //     } else if (\n              //       event.key === 'ArrowRight' &&\n              //       colIndex < props.cols - 1\n              //     ) {\n              //       inputRefs.current[rowIndex][colIndex + 1].focus()\n              //     } else if (event.key === 'Enter') {\n              //       handleEnterKeyPress(event, rowIndex, colIndex)\n              //     }\n              //   }}\n              //   ref={(input) => {\n              //     inputRefs.current[rowIndex][colIndex] = input\n              //   }}\n            >\n              {gridData[rowIndex][colIndex]}\n            </div>\n          ))}\n        </div>\n      ))}\n      <br />\n      <Gamekeyboard\n        lines={gridData}\n        answer={'abbotw'}\n        onClick={(e) => handleButton(e)}\n      />\n    </div>\n  )\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}