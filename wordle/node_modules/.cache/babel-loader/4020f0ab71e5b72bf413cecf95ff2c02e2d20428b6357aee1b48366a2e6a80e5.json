{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\n// import React, { useContext } from 'react'\n// import GridContext from './gridContext'\n\n// function Grid() {\n//   const { gridData, updateGridData } = useContext(GridContext)\n\n//   const handleInputChange = (event, row, col) => {\n//     const newData = [...gridData]\n//     newData[row][col] = event.target.value\n//     updateGridData(newData)\n//   }\n\n//   return (\n//     <table>\n//       <tbody>\n//         {gridData.map((row, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {row.map((cell, colIndex) => (\n//               <td key={colIndex}>\n//                 <input\n//                   type=\"text\"\n//                   value={cell}\n//                   onChange={(event) =>\n//                     handleInputChange(event, rowIndex, colIndex)\n//                   }\n//                 />\n//               </td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   )\n// }\n\n// export default Grid\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // State to hold the grid data\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n\n  // Function to handle changes in the grid data\n  function handleGridChange(event, row, col) {\n    const newData = [...gridData];\n    newData[row][col] = event.target.value;\n    setGridData(newData);\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: 1,\n        value: cell,\n        onChange: event => handleGridChange(event, rowIndex, colIndex),\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"c3kg1SKvsCmvVh8Y5E8uQFsjYmA=\");\n_c = Grid;\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Grid","props","_s","gridData","setGridData","createGridData","rows","cols","handleGridChange","event","row","col","newData","target","value","className","children","map","rowIndex","cell","colIndex","type","maxLength","onChange","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","_c","data","Array","fill","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["// import React, { useContext } from 'react'\n// import GridContext from './gridContext'\n\n// function Grid() {\n//   const { gridData, updateGridData } = useContext(GridContext)\n\n//   const handleInputChange = (event, row, col) => {\n//     const newData = [...gridData]\n//     newData[row][col] = event.target.value\n//     updateGridData(newData)\n//   }\n\n//   return (\n//     <table>\n//       <tbody>\n//         {gridData.map((row, rowIndex) => (\n//           <tr key={rowIndex}>\n//             {row.map((cell, colIndex) => (\n//               <td key={colIndex}>\n//                 <input\n//                   type=\"text\"\n//                   value={cell}\n//                   onChange={(event) =>\n//                     handleInputChange(event, rowIndex, colIndex)\n//                   }\n//                 />\n//               </td>\n//             ))}\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   )\n// }\n\n// export default Grid\nimport React, { useState } from 'react'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n\n  // Function to handle changes in the grid data\n  function handleGridChange(event, row, col) {\n    const newData = [...gridData]\n    newData[row][col] = event.target.value\n    setGridData(newData)\n  }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <input\n              key={colIndex}\n              type=\"text\"\n              maxLength={1}\n              value={cell}\n              onChange={(event) => handleGridChange(event, rowIndex, colIndex)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nexport default Grid\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CACtCQ,cAAc,CAACJ,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,IAAI,CAAC,CACvC;;EAED;EACA,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAE;IACzC,MAAMC,OAAO,GAAG,CAAC,GAAGT,QAAQ,CAAC;IAC7BS,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGF,KAAK,CAACI,MAAM,CAACC,KAAK;IACtCV,WAAW,CAACQ,OAAO,CAAC;EACtB;;EAEA;EACA,oBACEb,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,EAClBb,QAAQ,CAACc,GAAG,CAAC,CAACP,GAAG,EAAEQ,QAAQ,kBAC1BnB,OAAA;MAAoBgB,SAAS,EAAC,KAAK;MAAAC,QAAA,EAChCN,GAAG,CAACO,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtBrB,OAAA;QAEEsB,IAAI,EAAC,MAAM;QACXC,SAAS,EAAE,CAAE;QACbR,KAAK,EAAEK,IAAK;QACZI,QAAQ,EAAGd,KAAK,IAAKD,gBAAgB,CAACC,KAAK,EAAES,QAAQ,EAAEE,QAAQ,CAAE;QACjEI,KAAK,EAAE;UACLC,MAAM,EAAE,iBAAiB;UACzBC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,MAAM;UACdC,SAAS,EAAE;QACb;MAAE,GAVGR,QAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAYhB;IAAC,GAfMd,QAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAiBnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAC9B,EAAA,CArCQF,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AAsCb,SAASK,cAAcA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAClC;EACA,MAAM2B,IAAI,GAAGC,KAAK,CAAC7B,IAAI,CAAC,CACrB8B,IAAI,EAAE,CACNnB,GAAG,CAAC,MAAMkB,KAAK,CAAC5B,IAAI,CAAC,CAAC6B,IAAI,CAAC,EAAE,CAAC,CAAC;EAClC,OAAOF,IAAI;AACb;AAEA,eAAelC,IAAI;AAAA,IAAAiC,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}