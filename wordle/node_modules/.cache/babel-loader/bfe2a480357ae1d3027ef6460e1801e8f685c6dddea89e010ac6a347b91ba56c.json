{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/gameDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Grid from './grid';\nimport GridContext from './gridContext';\n// import { useLocation } from 'react-router-dom'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateAnswer(mode) {\n  // Got these words from ChatGPT\n  const normalWords = ['NUMBER', 'PEOPLE', 'BEFORE', 'LETTER', 'LITTLE', 'YELLOW', 'WINDOW', 'BOTTLE', 'BUTTON', 'BATTLE'];\n  const hardWords = ['abalone', 'bandana', 'chicken', 'dolphin', 'eclipse', 'furnace', 'gazelle', 'haddock', 'inquiry', 'javelin'];\n  return mode === 'normal' ? normalWords[Math.floor(Math.random() * normalWords.length)] : hardWords[Math.floor(Math.random() * hardWords.length)];\n}\n_c = GenerateAnswer;\nfunction GameDetail(props) {\n  _s();\n  const [gridData, setGridData] = useState([]);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [answer, setAnswer] = useState(GenerateAnswer(props.mode));\n  const updateGridData = newData => {\n    setGridData(newData);\n  };\n  return /*#__PURE__*/_jsxDEV(GridContext.Provider, {\n    value: {\n      gridData,\n      updateGridData\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      rows: props.row,\n      cols: props.col,\n      row: row,\n      setRow: setRow,\n      col: col,\n      setCol: setCol,\n      attempt: props.row,\n      answerWord: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(GameDetail, \"h9sUg6LlESkPYdp69cV63rWsutU=\");\n_c2 = GameDetail;\nexport default GameDetail;\nvar _c, _c2;\n$RefreshReg$(_c, \"GenerateAnswer\");\n$RefreshReg$(_c2, \"GameDetail\");","map":{"version":3,"names":["React","useState","useEffect","Grid","GridContext","jsxDEV","_jsxDEV","GenerateAnswer","mode","normalWords","hardWords","Math","floor","random","length","_c","GameDetail","props","_s","gridData","setGridData","row","setRow","col","setCol","answer","setAnswer","updateGridData","newData","Provider","value","children","rows","cols","attempt","answerWord","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/gameDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Grid from './grid'\nimport GridContext from './gridContext'\n// import { useLocation } from 'react-router-dom'\n\nfunction GenerateAnswer(mode) {\n  // Got these words from ChatGPT\n  const normalWords = [\n    'NUMBER',\n    'PEOPLE',\n    'BEFORE',\n    'LETTER',\n    'LITTLE',\n    'YELLOW',\n    'WINDOW',\n    'BOTTLE',\n    'BUTTON',\n    'BATTLE',\n  ]\n  const hardWords = [\n    'abalone',\n    'bandana',\n    'chicken',\n    'dolphin',\n    'eclipse',\n    'furnace',\n    'gazelle',\n    'haddock',\n    'inquiry',\n    'javelin',\n  ]\n  return mode === 'normal'\n    ? normalWords[Math.floor(Math.random() * normalWords.length)]\n    : hardWords[Math.floor(Math.random() * hardWords.length)]\n}\n\nfunction GameDetail(props) {\n  const [gridData, setGridData] = useState([])\n  const [row, setRow] = useState(0)\n  const [col, setCol] = useState(0)\n  const [answer, setAnswer] = useState(GenerateAnswer(props.mode))\n\n  const updateGridData = (newData) => {\n    setGridData(newData)\n  }\n\n  return (\n    <GridContext.Provider value={{ gridData, updateGridData }}>\n      <Grid\n        rows={props.row}\n        cols={props.col}\n        row={row}\n        setRow={setRow}\n        col={col}\n        setCol={setCol}\n        attempt={props.row}\n        answerWord={answer}\n      />\n    </GridContext.Provider>\n  )\n}\n\nexport default GameDetail\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,cAAcA,CAACC,IAAI,EAAE;EAC5B;EACA,MAAMC,WAAW,GAAG,CAClB,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CACT;EACD,MAAMC,SAAS,GAAG,CAChB,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV;EACD,OAAOF,IAAI,KAAK,QAAQ,GACpBC,WAAW,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,WAAW,CAACK,MAAM,CAAC,CAAC,GAC3DJ,SAAS,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,SAAS,CAACI,MAAM,CAAC,CAAC;AAC7D;AAACC,EAAA,GA7BQR,cAAc;AA+BvB,SAASS,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoB,GAAG,EAAEC,MAAM,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACsB,GAAG,EAAEC,MAAM,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACwB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAACM,cAAc,CAACU,KAAK,CAACT,IAAI,CAAC,CAAC;EAEhE,MAAMmB,cAAc,GAAIC,OAAO,IAAK;IAClCR,WAAW,CAACQ,OAAO,CAAC;EACtB,CAAC;EAED,oBACEtB,OAAA,CAACF,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEX,QAAQ;MAAEQ;IAAe,CAAE;IAAAI,QAAA,eACxDzB,OAAA,CAACH,IAAI;MACH6B,IAAI,EAAEf,KAAK,CAACI,GAAI;MAChBY,IAAI,EAAEhB,KAAK,CAACM,GAAI;MAChBF,GAAG,EAAEA,GAAI;MACTC,MAAM,EAAEA,MAAO;MACfC,GAAG,EAAEA,GAAI;MACTC,MAAM,EAAEA,MAAO;MACfU,OAAO,EAAEjB,KAAK,CAACI,GAAI;MACnBc,UAAU,EAAEV;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACnB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACmB;AAE3B;AAACrB,EAAA,CAxBQF,UAAU;AAAAwB,GAAA,GAAVxB,UAAU;AA0BnB,eAAeA,UAAU;AAAA,IAAAD,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}