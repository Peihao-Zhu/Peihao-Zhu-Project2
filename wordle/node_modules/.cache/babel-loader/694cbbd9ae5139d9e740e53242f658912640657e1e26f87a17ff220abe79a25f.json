{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport './grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([]);\n  const [attempt, setAttempt] = useState(props.rows);\n  function handleGridChange(newWord) {\n    setGridData(newWord);\n  }\n  function handleButton(e) {\n    let curWord = [...gridData];\n    switch (e) {\n      case 'Enter':\n        // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, 'abbotw')) {\n            // congraduate users and exit the program\n            setTimeout(() => {\n              const tryAgain = window.confirm('Congratulations!  Would you like to try again?');\n              if (tryAgain) {\n                // reset the program\n                resetGame();\n              } else {\n                // exit the program\n                window.stop();\n              }\n            }, 800);\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (attempt !== 1) {\n              props.setRow(row => row + 1);\n              props.setCol(col => 0);\n              setAttempt(att => att - 1);\n            } else {\n              // exit the program or reset the program\n              window.stop();\n            }\n          }\n          return;\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n        return;\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[props.row][props.col - 1] = '';\n          props.setCol(props.col - 1);\n        }\n        break;\n      default:\n        if (props.col === props.cols) {\n          return;\n        }\n        curWord[props.row][props.col] += e;\n        props.setCol(col => col + 1);\n        break;\n    }\n    handleGridChange(curWord);\n  }\n  function resetGame() {\n    // reset the program\n    setGridData(createGridData(props.rows, props.cols));\n    setBoxStatus(prevBoxStatus => []);\n    setAttempt(att => props.rows);\n    props.setRow(row => 0);\n    props.setCol(col => 0);\n  }\n  function checkLetters(curWord, row, answer) {\n    const map = new Map();\n    //items in the set have been compared\n    const set = new Set();\n    let flag = true;\n    let arrOfBox = [];\n    addItemInMap(map, answer);\n    for (let i = 0; i < curWord.length; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          arrOfBox.push({\n            id: row * props.cols + i,\n            value: '2'\n          });\n          map.set(answer[i], map.get(answer[i]) - 1);\n          set.add(i);\n        }\n      } else {\n        flag = false;\n      }\n    }\n    for (let j = 0; j < curWord.length; j++) {\n      if (set.has(j)) continue;\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (!set.has(j) && curWord[row][j] === answer[k] && map.get(answer[k]) > 0) {\n          arrOfBox.push({\n            id: row * props.cols + j,\n            value: '1'\n          });\n          map.set(answer[k], map.get(answer[k]) - 1);\n          set.add(j);\n        }\n      }\n    }\n    setBoxStatus(prevBoxStatus => [...prevBoxStatus, ...arrOfBox]);\n    return flag;\n  }\n  function updateColorOfBox(rowIndex, cols, colIndex) {\n    let status = 'none';\n    boxStatus.map(item => {\n      if (item.id === rowIndex * cols + colIndex) {\n        status = item.value === '1' ? 'yellow' : 'green';\n      }\n    });\n    return status;\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowItem\",\n        \"data-state\": updateColorOfBox(rowIndex, props.cols, colIndex)\n        //   id = {rowIndex*props.cols+colIndex}\n        //   onChange={(e) => handleGridChange(e)}\n        ,\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n        //   onKeyDown={(event) => {\n        //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n        //       inputRefs.current[rowIndex][colIndex - 1].focus()\n        //     } else if (\n        //       event.key === 'ArrowRight' &&\n        //       colIndex < props.cols - 1\n        //     ) {\n        //       inputRefs.current[rowIndex][colIndex + 1].focus()\n        //     } else if (event.key === 'Enter') {\n        //       handleEnterKeyPress(event, rowIndex, colIndex)\n        //     }\n        //   }}\n        //   ref={(input) => {\n        //     inputRefs.current[rowIndex][colIndex] = input\n        //   }}\n        ,\n        children: gridData[rowIndex][colIndex]\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n      lines: gridData[props.row][props.col],\n      answer: 'abbotw',\n      onClick: e => handleButton(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => resetGame(),\n      children: \"RESET GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"peAvtHfiO98VaSMGaGM4YkeT2XU=\");\n_c = Grid;\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i];\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  }\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","Gamekeyboard","jsxDEV","_jsxDEV","Grid","props","_s","gridData","setGridData","createGridData","rows","cols","boxStatus","setBoxStatus","attempt","setAttempt","handleGridChange","newWord","handleButton","e","curWord","col","checkLetters","row","setTimeout","tryAgain","window","confirm","resetGame","stop","setRow","setCol","att","warning","position","POSITION","TOP_RIGHT","length","prevBoxStatus","answer","map","Map","set","Set","flag","arrOfBox","addItemInMap","i","get","push","id","value","add","j","has","k","updateColorOfBox","rowIndex","colIndex","status","item","className","children","cell","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","lines","onClick","_c","data","Array","fill","key","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\nimport './grid.css'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([])\n  const [attempt, setAttempt] = useState(props.rows)\n\n  function handleGridChange(newWord) {\n    setGridData(newWord)\n  }\n\n  function handleButton(e) {\n    let curWord = [...gridData]\n\n    switch (e) {\n      case 'Enter': // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, 'abbotw')) {\n            // congraduate users and exit the program\n            setTimeout(() => {\n              const tryAgain = window.confirm(\n                'Congratulations!  Would you like to try again?',\n              )\n              if (tryAgain) {\n                // reset the program\n                resetGame()\n              } else {\n                // exit the program\n                window.stop()\n              }\n            }, 800)\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (attempt !== 1) {\n              props.setRow((row) => row + 1)\n              props.setCol((col) => 0)\n              setAttempt((att) => att - 1)\n            } else {\n              // exit the program or reset the program\n              window.stop()\n            }\n          }\n\n          return\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT,\n          })\n        }\n        return\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[props.row][props.col - 1] = ''\n          props.setCol(props.col - 1)\n        }\n        break\n      default:\n        if (props.col === props.cols) {\n          return\n        }\n        curWord[props.row][props.col] += e\n        props.setCol((col) => col + 1)\n        break\n    }\n    handleGridChange(curWord)\n  }\n\n  function resetGame() {\n    // reset the program\n    setGridData(createGridData(props.rows, props.cols))\n    setBoxStatus((prevBoxStatus) => [])\n    setAttempt((att) => props.rows)\n    props.setRow((row) => 0)\n    props.setCol((col) => 0)\n  }\n\n  function checkLetters(curWord, row, answer) {\n    const map = new Map()\n    //items in the set have been compared\n    const set = new Set()\n    let flag = true\n    let arrOfBox = []\n    addItemInMap(map, answer)\n\n    for (let i = 0; i < curWord.length; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          arrOfBox.push({ id: row * props.cols + i, value: '2' })\n          map.set(answer[i], map.get(answer[i]) - 1)\n          set.add(i)\n        }\n      } else {\n        flag = false\n      }\n    }\n    for (let j = 0; j < curWord.length; j++) {\n      if (set.has(j)) continue\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (\n          !set.has(j) &&\n          curWord[row][j] === answer[k] &&\n          map.get(answer[k]) > 0\n        ) {\n          arrOfBox.push({ id: row * props.cols + j, value: '1' })\n          map.set(answer[k], map.get(answer[k]) - 1)\n          set.add(j)\n        }\n      }\n    }\n    setBoxStatus((prevBoxStatus) => [...prevBoxStatus, ...arrOfBox])\n\n    return flag\n  }\n\n  function updateColorOfBox(rowIndex, cols, colIndex) {\n    let status = 'none'\n    boxStatus.map((item) => {\n      if (item.id === rowIndex * cols + colIndex) {\n        status = item.value === '1' ? 'yellow' : 'green'\n      }\n    })\n    return status\n  }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              className=\"rowItem\"\n              key={colIndex}\n              data-state={updateColorOfBox(rowIndex, props.cols, colIndex)}\n              //   id = {rowIndex*props.cols+colIndex}\n              //   onChange={(e) => handleGridChange(e)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n              //   onKeyDown={(event) => {\n              //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n              //       inputRefs.current[rowIndex][colIndex - 1].focus()\n              //     } else if (\n              //       event.key === 'ArrowRight' &&\n              //       colIndex < props.cols - 1\n              //     ) {\n              //       inputRefs.current[rowIndex][colIndex + 1].focus()\n              //     } else if (event.key === 'Enter') {\n              //       handleEnterKeyPress(event, rowIndex, colIndex)\n              //     }\n              //   }}\n              //   ref={(input) => {\n              //     inputRefs.current[rowIndex][colIndex] = input\n              //   }}\n            >\n              {gridData[rowIndex][colIndex]}\n            </div>\n          ))}\n        </div>\n      ))}\n      <br />\n      <Gamekeyboard\n        lines={gridData[props.row][props.col]}\n        answer={'abbotw'}\n        onClick={(e) => handleButton(e)}\n      />\n      <button onClick={() => resetGame()}>RESET GAME</button>\n      <ToastContainer />\n    </div>\n  )\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i]\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1)\n    } else {\n      map.set(key, 1)\n    }\n  }\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}