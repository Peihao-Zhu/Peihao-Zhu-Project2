{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  //   function handleGridChange(event, row, col) {\n  //     const newData = [...gridData]\n  //     newData[row][col] = event.target.value\n  //     setGridData(newData)\n\n  //     // Move focus to next input element\n  //     if (col < props.cols - 1) {\n  //       inputRefs.current[row][col + 1].focus()\n  //     }\n  //   }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: 1,\n        value: cell\n        //   onChange={(event) => handleGridChange(event, rowIndex, colIndex)}\n        ,\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n        //   onKeyDown={(event) => {\n        //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n        //       inputRefs.current[rowIndex][colIndex - 1].focus()\n        //     } else if (\n        //       event.key === 'ArrowRight' &&\n        //       colIndex < props.cols - 1\n        //     ) {\n        //       inputRefs.current[rowIndex][colIndex + 1].focus()\n        //     } else if (event.key === 'Enter') {\n        //       handleEnterKeyPress(event, rowIndex, colIndex)\n        //     }\n        //   }}\n        //   ref={(input) => {\n        //     inputRefs.current[rowIndex][colIndex] = input\n        //   }}\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n      lines: 3,\n      answer: 'abbotw',\n      onClick: e => handleButton(e, props)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = Grid;\nfunction handleButton(e, props) {\n  _s();\n  // if (this.state.win) return\n  //   let currentWord = \"\"\n  // if (this.state.theCurrentLineNo === 6) {\n  //   return\n  // }\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n  const curWord = [...gridData];\n  switch (e) {\n    case 'Enter':\n      // CR\n      if (curWord.length === props.cols) {\n        // this.CheckLetters()\n        return;\n      }\n      return;\n    case 'Backspace':\n      //bS\n      if (curWord.length > 0) {\n        curWord = curWord.substr(0, curWord.length - 1);\n      }\n      break;\n    default:\n      if (curWord.length === props.cols) {\n        return;\n      }\n      curWord[row][col] += e;\n      break;\n  }\n  setGridData(curWord);\n}\n_s(handleButton, \"c3kg1SKvsCmvVh8Y5E8uQFsjYmA=\");\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useRef","Gamekeyboard","jsxDEV","_jsxDEV","Grid","props","className","children","gridData","map","row","rowIndex","cell","colIndex","type","maxLength","value","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","lines","answer","onClick","e","handleButton","_c","_s","setGridData","createGridData","rows","cols","curWord","length","substr","col","data","Array","fill","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["import React, { useState, useRef } from 'react'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  //   function handleGridChange(event, row, col) {\n  //     const newData = [...gridData]\n  //     newData[row][col] = event.target.value\n  //     setGridData(newData)\n\n  //     // Move focus to next input element\n  //     if (col < props.cols - 1) {\n  //       inputRefs.current[row][col + 1].focus()\n  //     }\n  //   }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <input\n              key={colIndex}\n              type=\"text\"\n              maxLength={1}\n              value={cell}\n              //   onChange={(event) => handleGridChange(event, rowIndex, colIndex)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n              //   onKeyDown={(event) => {\n              //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n              //       inputRefs.current[rowIndex][colIndex - 1].focus()\n              //     } else if (\n              //       event.key === 'ArrowRight' &&\n              //       colIndex < props.cols - 1\n              //     ) {\n              //       inputRefs.current[rowIndex][colIndex + 1].focus()\n              //     } else if (event.key === 'Enter') {\n              //       handleEnterKeyPress(event, rowIndex, colIndex)\n              //     }\n              //   }}\n              //   ref={(input) => {\n              //     inputRefs.current[rowIndex][colIndex] = input\n              //   }}\n            />\n          ))}\n        </div>\n      ))}\n      <br />\n      <Gamekeyboard\n        lines={3}\n        answer={'abbotw'}\n        onClick={(e) => handleButton(e, props)}\n      />\n    </div>\n  )\n}\nfunction handleButton(e, props) {\n  // if (this.state.win) return\n  //   let currentWord = \"\"\n  // if (this.state.theCurrentLineNo === 6) {\n  //   return\n  // }\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n  const curWord = [...gridData]\n\n  switch (e) {\n    case 'Enter': // CR\n      if (curWord.length === props.cols) {\n        // this.CheckLetters()\n        return\n      }\n      return\n    case 'Backspace': //bS\n      if (curWord.length > 0) {\n        curWord = curWord.substr(0, curWord.length - 1)\n      }\n      break\n    default:\n      if (curWord.length === props.cols) {\n        return\n      }\n      curWord[row][col] += e\n      break\n  }\n  setGridData(curWord)\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}