{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/github-desktop/Peihao-Zhu-Project2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport './grid.css';\nimport WordleContext from './WordleContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // fetch the global variables in context\n  const {\n    gridDataObject,\n    rows,\n    cols,\n    rowObject,\n    colObject,\n    answerObject,\n    mode\n  } = useContext(WordleContext);\n  const [gridData, setGridData] = gridDataObject;\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([]);\n  const [attempt, setAttempt] = useState(props.rows);\n  const [answer, handleAnswer] = answerObject;\n  const [row, setRow] = rowObject;\n  const [col, setCol] = colObject;\n  function handleGridChange(newWord) {\n    setGridData(newWord);\n  }\n\n  // each time we hit a button, process corresponding logic here\n  function handleButton(e) {\n    let curWord = [...gridData];\n    switch (e) {\n      // check the word\n      case 'Enter':\n        if (col === cols) {\n          if (checkLetters(curWord, row, answer)) {\n            // congraduate users and exit the program\n            setTimeout(() => {\n              const tryAgain = window.confirm('Congratulations!  Would you like to try again?');\n              if (tryAgain) {\n                // reset the program\n                resetGame();\n              } else {\n                // exit the program\n                window.stop();\n              }\n            }, 80);\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (attempt !== 1) {\n              setRow(row => row + 1);\n              setCol(col => 0);\n              setAttempt(att => att - 1);\n            } else {\n              // exit the program or reset the program\n              window.stop();\n            }\n          }\n          return;\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n        return;\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[row][col - 1] = '';\n          setCol(col - 1);\n        }\n        break;\n      // english letters\n      default:\n        if (col === cols) {\n          return;\n        }\n        curWord[row][col] += e;\n        setCol(col => col + 1);\n        break;\n    }\n    handleGridChange(curWord);\n  }\n  function resetGame() {\n    // reset the program\n    setGridData(createGridData(rows, cols));\n    setBoxStatus(prevBoxStatus => []);\n    setAttempt(att => rows);\n    setRow(row => 0);\n    setCol(col => 0);\n    handleAnswer(mode);\n  }\n\n  // check the word in row of curWord board with the answer\n  function checkLetters(curWord, row, answer) {\n    const map = new Map();\n    //items in the set have been compared\n    const set = new Set();\n    let flag = true;\n    let arrOfBox = [];\n    addItemInMap(map, answer);\n    for (let i = 0; i < cols; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          arrOfBox.push({\n            id: row * cols + i,\n            value: '2'\n          });\n          map.set(answer[i], map.get(answer[i]) - 1);\n          set.add(i);\n        }\n      } else {\n        flag = false;\n      }\n    }\n    for (let j = 0; j < cols; j++) {\n      if (set.has(j)) continue;\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (!set.has(j) && curWord[row][j] === answer[k] && map.get(answer[k]) > 0) {\n          arrOfBox.push({\n            id: row * cols + j,\n            value: '1'\n          });\n          map.set(answer[k], map.get(answer[k]) - 1);\n          set.add(j);\n        }\n      }\n    }\n    setBoxStatus(prevBoxStatus => [...prevBoxStatus, ...arrOfBox]);\n    return flag;\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \" Wordle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rowItem\",\n          \"data-state\": updateColorOfBox(rowIndex, cols, colIndex),\n          children: gridData[rowIndex][colIndex]\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-game-keyboard\",\n      children: /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n        lines: gridData[row][col],\n        answer: answer,\n        onClick: e => handleButton(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-btn\",\n      onClick: () => resetGame(),\n      children: \"RESET GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"sqMe0EJn1XFrT4m2xW3CHa9C6cE=\");\n_c = Grid;\nfunction updateColorOfBox(rowIndex, cols, colIndex) {\n  let status = 'none';\n  boxStatus.forEach(item => {\n    if (item.id === rowIndex * cols + colIndex) {\n      status = item.value === '1' ? 'yellow' : 'green';\n    }\n  });\n  return status;\n}\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i];\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  }\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useContext","useState","ToastContainer","toast","Gamekeyboard","WordleContext","jsxDEV","_jsxDEV","Grid","props","_s","gridDataObject","rows","cols","rowObject","colObject","answerObject","mode","gridData","setGridData","boxStatus","setBoxStatus","attempt","setAttempt","answer","handleAnswer","row","setRow","col","setCol","handleGridChange","newWord","handleButton","e","curWord","checkLetters","setTimeout","tryAgain","window","confirm","resetGame","stop","att","warning","position","POSITION","TOP_RIGHT","length","createGridData","prevBoxStatus","map","Map","set","Set","flag","arrOfBox","addItemInMap","i","get","push","id","value","add","j","has","k","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","updateColorOfBox","lines","onClick","_c","status","forEach","item","data","Array","fill","key","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/github-desktop/Peihao-Zhu-Project2/wordle/src/grid.js"],"sourcesContent":["import React, { useContext, useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\nimport './grid.css'\nimport WordleContext from './WordleContext'\n\nfunction Grid(props) {\n  // fetch the global variables in context\n  const {\n    gridDataObject,\n    rows,\n    cols,\n    rowObject,\n    colObject,\n    answerObject,\n    mode,\n  } = useContext(WordleContext)\n\n  const [gridData, setGridData] = gridDataObject\n  //id:rowIndex*props.cols+colIndex value: 0,1,2\n  const [boxStatus, setBoxStatus] = useState([])\n  const [attempt, setAttempt] = useState(props.rows)\n  const [answer, handleAnswer] = answerObject\n  const [row, setRow] = rowObject\n  const [col, setCol] = colObject\n\n  function handleGridChange(newWord) {\n    setGridData(newWord)\n  }\n\n  // each time we hit a button, process corresponding logic here\n  function handleButton(e) {\n    let curWord = [...gridData]\n    switch (e) {\n      // check the word\n      case 'Enter':\n        if (col === cols) {\n          if (checkLetters(curWord, row, answer)) {\n            // congraduate users and exit the program\n            setTimeout(() => {\n              const tryAgain = window.confirm(\n                'Congratulations!  Would you like to try again?',\n              )\n              if (tryAgain) {\n                // reset the program\n                resetGame()\n              } else {\n                // exit the program\n                window.stop()\n              }\n            }, 80)\n          } else {\n            // deduct user's attempt\n            // if there are remaining attempts, reset the current row and col cursor\n            if (attempt !== 1) {\n              setRow((row) => row + 1)\n              setCol((col) => 0)\n              setAttempt((att) => att - 1)\n            } else {\n              // exit the program or reset the program\n              window.stop()\n            }\n          }\n          return\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT,\n          })\n        }\n        return\n      case 'Backspace':\n        if (curWord.length > 0) {\n          //delete the last character in current row\n          curWord[row][col - 1] = ''\n          setCol(col - 1)\n        }\n        break\n      // english letters\n      default:\n        if (col === cols) {\n          return\n        }\n        curWord[row][col] += e\n        setCol((col) => col + 1)\n        break\n    }\n    handleGridChange(curWord)\n  }\n\n  function resetGame() {\n    // reset the program\n    setGridData(createGridData(rows, cols))\n    setBoxStatus((prevBoxStatus) => [])\n    setAttempt((att) => rows)\n    setRow((row) => 0)\n    setCol((col) => 0)\n    handleAnswer(mode)\n  }\n\n  // check the word in row of curWord board with the answer\n  function checkLetters(curWord, row, answer) {\n    const map = new Map()\n    //items in the set have been compared\n    const set = new Set()\n    let flag = true\n    let arrOfBox = []\n    addItemInMap(map, answer)\n\n    for (let i = 0; i < cols; i++) {\n      if (curWord[row][i] === answer[i]) {\n        if (map.get(answer[i]) > 0) {\n          //key: rowIndex*props.cols+colIndex,  location and value correct\n          arrOfBox.push({ id: row * cols + i, value: '2' })\n          map.set(answer[i], map.get(answer[i]) - 1)\n          set.add(i)\n        }\n      } else {\n        flag = false\n      }\n    }\n    for (let j = 0; j < cols; j++) {\n      if (set.has(j)) continue\n      for (let k = 0; k < answer.length; k++) {\n        //values are same but location are different\n        if (\n          !set.has(j) &&\n          curWord[row][j] === answer[k] &&\n          map.get(answer[k]) > 0\n        ) {\n          arrOfBox.push({ id: row * cols + j, value: '1' })\n          map.set(answer[k], map.get(answer[k]) - 1)\n          set.add(j)\n        }\n      }\n    }\n    setBoxStatus((prevBoxStatus) => [...prevBoxStatus, ...arrOfBox])\n    return flag\n  }\n\n  // Render the grid\n  return (\n    <div className=\"game-page\">\n      <h1 className=\"title\"> Wordle</h1>\n      <div className=\"grid\">\n        {gridData.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                className=\"rowItem\"\n                key={colIndex}\n                data-state={updateColorOfBox(rowIndex, cols, colIndex)}\n              >\n                {gridData[rowIndex][colIndex]}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <br />\n      <div className=\"my-game-keyboard\">\n        <Gamekeyboard\n          lines={gridData[row][col]}\n          answer={answer}\n          onClick={(e) => handleButton(e)}\n        />\n      </div>\n      <button className=\"reset-btn\" onClick={() => resetGame()}>\n        RESET GAME\n      </button>\n      <ToastContainer />\n    </div>\n  )\n}\n\nfunction updateColorOfBox(rowIndex, cols, colIndex) {\n  let status = 'none'\n  boxStatus.forEach((item) => {\n    if (item.id === rowIndex * cols + colIndex) {\n      status = item.value === '1' ? 'yellow' : 'green'\n    }\n  })\n  return status\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nfunction addItemInMap(map, answer) {\n  for (let i = 0; i < answer.length; i++) {\n    const key = answer[i]\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1)\n    } else {\n      map.set(key, 1)\n    }\n  }\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}