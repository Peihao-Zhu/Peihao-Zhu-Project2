{"ast":null,"code":"var _jsxFileName = \"/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Gamekeyboard from './Keyboard/Gamekeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Grid(props) {\n  _s();\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(createGridData(props.rows, props.cols));\n  function handleGridChange(newWord) {\n    setGridData(newWord);\n  }\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData];\n\n    // console.log(\n    //   e +\n    //     ' ' +\n    //     gridData +\n    //     ' ' +\n    //     curWord +\n    //     ' ' +\n    //     props.rows +\n    //     ' ' +\n    //     props.cols +\n    //     ' ' +\n    //     props.row +\n    //     ' ' +\n    //     props.col,\n    // )\n\n    switch (e) {\n      case 'Enter':\n        // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, 'abbotw')) {\n            // congraduate users and exit the program\n            const tryAgain = window.confirm('Congratulations!  Would you like to try again?');\n            if (tryAgain) {\n              // reset the program\n            } else {\n              // exit the program\n              process.exit(0);\n            }\n          } else {\n            // deduct user's attempt\n          }\n\n          // if there are remaining attempts, reset the current row and col cursor\n          if (props.attempt !== 0) {\n            props.setRow(row => row + 1);\n            props.setCol(col => 0);\n          } else {\n            // exit the program or reset the program\n          }\n          return;\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n        return;\n      case 'Backspace':\n        //bS\n        if (curWord.length > 0) {\n          curWord = curWord.substr(0, curWord.length - 1);\n        }\n        break;\n      default:\n        if (props.col === props.cols) {\n          return;\n        }\n        curWord[props.row][props.col] += e;\n        props.setCol(col => col + 1);\n        break;\n    }\n    handleGridChange(curWord);\n  }\n\n  // Render the grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        //   onChange={(e) => handleGridChange(e)}\n        style: {\n          border: '1px solid black',\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        }\n        //   onKeyDown={(event) => {\n        //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n        //       inputRefs.current[rowIndex][colIndex - 1].focus()\n        //     } else if (\n        //       event.key === 'ArrowRight' &&\n        //       colIndex < props.cols - 1\n        //     ) {\n        //       inputRefs.current[rowIndex][colIndex + 1].focus()\n        //     } else if (event.key === 'Enter') {\n        //       handleEnterKeyPress(event, rowIndex, colIndex)\n        //     }\n        //   }}\n        //   ref={(input) => {\n        //     inputRefs.current[rowIndex][colIndex] = input\n        //   }}\n        ,\n        children: gridData[rowIndex][colIndex]\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gamekeyboard, {\n      lines: gridData,\n      answer: 'abbotw',\n      onClick: e => handleButton(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Grid, \"c3kg1SKvsCmvVh8Y5E8uQFsjYmA=\");\n_c = Grid;\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows).fill().map(() => Array(cols).fill(''));\n  return data;\n}\nfunction checkLetters(curWord, row, answer) {\n  console.log(answer + ' ' + curWord + ' ' + row);\n  for (let i = 0; i < curWord.length; i++) {\n    if (curWord[row][i] !== answer[i]) return false;\n  }\n  return true;\n}\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","Gamekeyboard","jsxDEV","_jsxDEV","Grid","props","_s","gridData","setGridData","createGridData","rows","cols","handleGridChange","newWord","handleButton","e","curWord","col","checkLetters","row","tryAgain","window","confirm","process","exit","attempt","setRow","setCol","warning","position","POSITION","TOP_RIGHT","length","substr","className","children","map","rowIndex","cell","colIndex","style","border","width","height","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","lines","answer","onClick","_c","data","Array","fill","console","log","i","$RefreshReg$"],"sources":["/Users/zhupeihao/Desktop/NEU/cs5610/project 2/wordle/src/grid.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Gamekeyboard from './Keyboard/Gamekeyboard'\n\nfunction Grid(props) {\n  // State to hold the grid data\n  //   // Array to store refs to each input element\n  //   const inputRefs = useRef(\n  //     Array(props.rows)\n  //       .fill()\n  //       .map(() => Array(props.cols).fill(null)),\n  //   )\n\n  //   // Function to handle changes in the grid data\n  // function handleGridChange(event, row, col) {\n  //   const newData = [...gridData]\n  //   newData[row][col] = event.target.value\n  //   setGridData(newData)\n\n  //   // Move focus to next input element\n  //   if (col < props.cols - 1) {\n  //     inputRefs.current[row][col + 1].focus()\n  //   }\n  // }\n  //   // Function to handle Enter key press\n  //   function handleEnterKeyPress(event, row, col) {\n  //     // Move focus to next row\n  //     if (row < props.rows - 1) {\n  //       inputRefs.current[row + 1][0].focus()\n  //     }\n  //   }\n  const [gridData, setGridData] = useState(\n    createGridData(props.rows, props.cols),\n  )\n\n  function handleGridChange(newWord) {\n    setGridData(newWord)\n  }\n\n  function handleButton(e) {\n    // if (this.state.win) return\n    //   let currentWord = \"\"\n    // if (this.state.theCurrentLineNo === 6) {\n    //   return\n    // }\n\n    let curWord = [...gridData]\n\n    // console.log(\n    //   e +\n    //     ' ' +\n    //     gridData +\n    //     ' ' +\n    //     curWord +\n    //     ' ' +\n    //     props.rows +\n    //     ' ' +\n    //     props.cols +\n    //     ' ' +\n    //     props.row +\n    //     ' ' +\n    //     props.col,\n    // )\n\n    switch (e) {\n      case 'Enter': // CR\n        if (props.col === props.cols) {\n          if (checkLetters(curWord, props.row, 'abbotw')) {\n            // congraduate users and exit the program\n            const tryAgain = window.confirm(\n              'Congratulations!  Would you like to try again?',\n            )\n            if (tryAgain) {\n              // reset the program\n            } else {\n              // exit the program\n              process.exit(0)\n            }\n          } else {\n            // deduct user's attempt\n          }\n\n          // if there are remaining attempts, reset the current row and col cursor\n          if (props.attempt !== 0) {\n            props.setRow((row) => row + 1)\n            props.setCol((col) => 0)\n          } else {\n            // exit the program or reset the program\n          }\n          return\n        } else {\n          // prompt that user \"not enough letters\"\n          toast.warning('not enough letters', {\n            position: toast.POSITION.TOP_RIGHT,\n          })\n        }\n        return\n      case 'Backspace': //bS\n        if (curWord.length > 0) {\n          curWord = curWord.substr(0, curWord.length - 1)\n        }\n        break\n      default:\n        if (props.col === props.cols) {\n          return\n        }\n        curWord[props.row][props.col] += e\n        props.setCol((col) => col + 1)\n        break\n    }\n    handleGridChange(curWord)\n  }\n\n  // Render the grid\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              key={colIndex}\n              //   onChange={(e) => handleGridChange(e)}\n              style={{\n                border: '1px solid black',\n                width: '30px',\n                height: '30px',\n                textAlign: 'center',\n              }}\n              //   onKeyDown={(event) => {\n              //     if (event.key === 'ArrowLeft' && colIndex > 0) {\n              //       inputRefs.current[rowIndex][colIndex - 1].focus()\n              //     } else if (\n              //       event.key === 'ArrowRight' &&\n              //       colIndex < props.cols - 1\n              //     ) {\n              //       inputRefs.current[rowIndex][colIndex + 1].focus()\n              //     } else if (event.key === 'Enter') {\n              //       handleEnterKeyPress(event, rowIndex, colIndex)\n              //     }\n              //   }}\n              //   ref={(input) => {\n              //     inputRefs.current[rowIndex][colIndex] = input\n              //   }}\n            >\n              {gridData[rowIndex][colIndex]}\n            </div>\n          ))}\n        </div>\n      ))}\n      <br />\n      <Gamekeyboard\n        lines={gridData}\n        answer={'abbotw'}\n        onClick={(e) => handleButton(e)}\n      />\n      <ToastContainer />\n    </div>\n  )\n}\n\nfunction createGridData(rows, cols) {\n  // Initialize grid data to empty strings\n  const data = Array(rows)\n    .fill()\n    .map(() => Array(cols).fill(''))\n  return data\n}\n\nfunction checkLetters(curWord, row, answer) {\n  console.log(answer + ' ' + curWord + ' ' + row)\n  for (let i = 0; i < curWord.length; i++) {\n    if (curWord[row][i] !== answer[i]) return false\n  }\n  return true\n}\n\nexport default Grid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}